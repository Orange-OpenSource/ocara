/*
 * Copyright (C) 2015 Orange
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
apply plugin: 'com.android.application'

apply plugin: 'com.google.gms.google-services'

apply plugin: 'project-report'
apply plugin: "androidx.navigation.safeargs"
// configuring Firebase / Crashlytics
// see the project's Firebase home : https://console.firebase.google.com/
// see the Getting Started : https://firebase.google.com/docs/crashlytics/get-started?platform=android
apply plugin: 'io.fabric'
//apply plugin: "androidx.navigation.safeargs"

apply plugin: 'dagger.hilt.android.plugin'
// Apply the Crashlytics Gradle plugin
//apply plugin: 'com.google.firebase.crashlytics'
android {
    // the API version of Android that you compile against
    compileSdkVersion rootProject.ext.compileSdkVersion

    // the version of the compilers (aapt, dx, renderscript compiler, etc...) that you want to use.
    // For each API level (starting with 18), there is a matching .0.0 version.
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId 'com.orange.ocara'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCodeValue
        versionName rootProject.ext.versionNameValue
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        // Enabling multidex support.
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "androidManifestFile": "$projectDir/src/main/AndroidManifest.xml".toString(),
                        'resourcePackageName': android.defaultConfig.applicationId,
                        'logLevel'           : 'INFO',
                        'trace'              : 'false']
            }
        }
    }
    configurations {
        all {
            resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
        }
    }
    lintOptions {
        abortOnError false
        htmlReport true
        checkReleaseBuilds true
        disable "LogNotTimber", "StringFormatInTimber", "ThrowableNotAtBeginning", "BinaryOperationInTimber", "TimberArgCount", "TimberArgTypes", "TimberTagLength", "TimberExceptionLogging"
    }
    dexOptions {
        incremental true
        javaMaxHeapSize "20g"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
        release {
            if (project.hasProperty('OCARA_KSTORE_PWD') && project.hasProperty('OCARA_KEY_PWD')) {
                /**
                 * see the Jenkins configuration file named Gradle
                 * @link http://10.192.35.187/jenkins/configfiles/
                 */
                storeFile file('./src/orangewithoutsmtk/assets/keystore/ocara.jks')
                storePassword OCARA_KSTORE_PWD
                keyAlias 'ocara'
                keyPassword OCARA_KEY_PWD
            } else if (project.hasProperty('GRADLE_KEYSTORE_PWD') && project.hasProperty('GRADLE_KEYSTORE_ALIAS_PWD')) {
                /**
                 * see gradle.properties
                 */
                storeFile file(GRADLE_KEYSTORE)
                storePassword GRADLE_KEYSTORE_PWD
                keyAlias GRADLE_KEYSTORE_ALIAS
                keyPassword GRADLE_KEYSTORE_ALIAS_PWD
            }
        }
    }
    /**
     * see https://developer.android.com/studio/build/build-variants
     */
    buildTypes {
        /**
         * debug : variant for development mode.
         */
        debug {
            minifyEnabled false
//            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        /**
         * release : variant for production mode.
         */
        release {
            minifyEnabled true
//            useProguard true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    /**
     * Configuring flavors based on dimensions
     * - 'mode' : opensource / orange / orangewithoutsmtk
     * - 'env' : local / dev / integration / preproduction
     *
     * In particular, configuring applicationIds in flavors helps on storing several alternatives of
     * the app on a single device.
     */
    flavorDimensions 'dev'
    productFlavors {


        /**
         * dev : CI environment. See Jenkinsfile for more details about the use of this flavor.
         *
         * this variant is related to sources in src/dev/
         * - src/dev/res
         * - src/dev/google-services.json
         */
        dev {
            dimension "dev"
            applicationId 'com.orange.ocara.dev'
//            buildConfigField("String", "OCARA_SERVEUR", "\"https://confocara-int.noprod-b.kmt.orange.com/\"")
            buildConfigField("String", "OCARA_SERVEUR", "\"https://ocara-dev-public-conf-ocara.apps.fr01.paas.diod.orange.com/\"")
        }
        preprod {
            dimension "dev"
            applicationId 'com.orange.ocara.dev'
            buildConfigField("String", "OCARA_SERVEUR", "\"https://ocara-public-ocara.apps.fr01.paas.diod.orange.com/\"")
        }
    }
    /**
     * GoogleServices requires a file named google-services.json, whose content depends on the
     * targeted flavors.
     * For instance, the attribute "client.package_name" is related to the applicationId, which also
     * depends on flavors with the "env" dimension.
     *
     * The closure "whenTaskAdded" helps on retrieving the appropriate "google-services.json" and
     * copying in the source root folder, before the task is being executed.
     */
    tasks.whenTaskAdded { task ->
        def taskName = task.name
        if (taskName ==~ /(?s).*GoogleServices.*/) {
            if (taskName ==~ /(?s).*Local.*/) {

                task.doFirst() {
                    copyGoogleServices("local")
                }
            } else if (taskName ==~ /(?s).*Dev.*/) {

                task.doFirst() {
                    copyGoogleServices("dev")
                }
            } else if (taskName ==~ /(?s).*Integration.*/) {

                task.doFirst() {
                    copyGoogleServices("integration")
                }
            } else if (taskName ==~ /(?s).*Preprod.*/) {

                task.doFirst() {
                    copyGoogleServices("preprod")
                }
            }
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
    sourceSets {

//        opensource {
//            java.srcDirs = ['src/main/java', 'src/opensource/java']
//            assets.srcDirs = ['src/opensource/assets']
//            resources.srcDirs = ['src/opensource/res']
//        }


        test {
            resources.srcDirs += ['src/test/res', 'src/main/res']
            assets.srcDirs += ['src/main/assets', 'src/main/assetsopensource']
        }
    }
    testOptions {
        animationsDisabled true
        unitTests {
            includeAndroidResources true
            returnDefaultValues true

            // Always show the result of every unit test, even if it passes.
            all {
                testLogging {
                    events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                }
            }
        }
    }

    dataBinding {
        enabled = true
    }
}

/**
 * Function that helps on copying files to one source into the app's root folder
 *
 * @param sourceName is the relative path to the file to copy
 * @return nothing yet
 */
def copyGoogleServices(sourceName) {

    copy {
        from "src/" + sourceName + "/google-services.json"
        into '.'
    }
}


/**
 * @link https://docs.gradle.org/current/userguide/dependency_management_for_java_projects.html#sec:configurations_java_tutorial
 */
dependencies {

    // Android Dependencies
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.constraintlayout:constraintlayout:2.0.1"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.preference:preference:1.1.1"
    implementation "com.google.android.material:material:1.2.1"

    // Firebase
    implementation 'com.google.firebase:firebase-core:18.0.0'
    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true
    }
    implementation 'com.google.firebase:firebase-crashlytics:17.2.2'

    implementation project(path: ':domain')
    implementation project(path: ':data')
    implementation project(path: ':ActiveAndroidLib')
    implementation project(path: ':utils')


    testImplementation("org.robolectric:robolectric:4.3") {
        exclude group: 'org.apache.maven', module: 'maven-artifact'
        exclude group: 'org.apache.maven', module: 'maven-artifact-manager'
        exclude group: 'org.apache.maven', module: 'maven-model'
        exclude group: 'org.apache.maven', module: 'maven-plugin-registry'
        exclude group: 'org.apache.maven', module: 'maven-profile'
        exclude group: 'org.apache.maven', module: 'maven-project'
        exclude group: 'org.apache.maven', module: 'maven-settings'
        exclude group: 'org.apache.maven', module: 'maven-error-diagnostics'
        exclude group: "org.apache.maven.wagon"
    }
    /**
     * "AndroidAnnotations is an Open Source framework that speeds up Android development. It takes
     * care of the plumbing, and lets you concentrate on what's really important. By simplifying
     * your code, it facilitates its maintenance."
     *
     * @link http://androidannotations.org/
     */
    implementation 'com.android.support:support-annotations:28.0.0'
    annotationProcessor "org.androidannotations:androidannotations:4.6.0"
    implementation "org.androidannotations:androidannotations-api:4.6.0"
    implementation 'com.android.support:recyclerview-v7:28.0.0'

    /**
     * "Project Lombok is a java library that automatically plugs into your editor and build tools,
     * spicing up your java.
     * Never write another getter or equals method again, with one annotation your class has a fully
     * featured builder, Automate your logging variables, and much more."
     *
     * @link https://projectlombok.org/
     */
    compileOnly 'org.projectlombok:lombok:1.16.18'
    annotationProcessor 'org.projectlombok:lombok:1.16.18'

    /**
     * "This is a logger with a small, extensible API which provides utility on top of Android's
     * normal Log class."
     *
     * @link https://github.com/JakeWharton/timber
     */
    implementation 'com.jakewharton.timber:timber:4.6.0'

    // Picasso for pictures loading
    implementation 'com.squareup.picasso:picasso:2.5.2'

    // TwoWay horizontal listview
    implementation 'org.lucasr.twowayview:twowayview:0.1.4'

    implementation "androidx.fragment:fragment:1.3.6"

    debugImplementation "androidx.fragment:fragment-testing:1.3.6"
    /**
     * "ActiveAndroid is an active record style ORM (Object Relational Mapper)."
     *
     * @link https://github.com/pardom-zz/ActiveAndroid
     */
    //  implementation files('libs/activeandroid-3.1.0-SNAPSHOT.jar')

    // Stetho for Db debug
    implementation 'com.facebook.stetho:stetho:1.5.0'

    // JSON parser
    implementation 'com.google.code.gson:gson:2.8.6'

    // Mustache template engine
    implementation 'com.samskivert:jmustache:1.14'

    // Docx generation
    implementation 'org.apache.poi:poi:3.17'

    // PDF Viewer
    implementation 'com.github.barteksc:android-pdf-viewer:3.2.0-beta.1'


    // Retrofit 2
    implementation 'com.squareup.retrofit2:retrofit:2.7.1'
    implementation 'com.squareup.retrofit2:converter-gson:2.7.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.1'
    implementation 'com.squareup.okhttp3:okhttp:4.2.1'

    // Tests libraries
    testImplementation 'org.mockito:mockito-core:3.3.1'
    testImplementation 'org.assertj:assertj-core:3.14.0'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation "org.robolectric:shadows-multidex:4.3"
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'androidx.test:core:1.3.0'

    implementation rootProject.ext.libraries.Hilt
    annotationProcessor rootProject.ext.libraries.HiltAnnotation

    androidTestImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation "androidx.test.espresso:espresso-core:3.3.0"


    //app center Request API 15 min
    implementation "com.microsoft.appcenter:appcenter-analytics:$rootProject.appCenterSdkVersion"
    implementation "com.microsoft.appcenter:appcenter-crashes:$rootProject.appCenterSdkVersion"
    testImplementation 'org.apache.commons:commons-lang3:3.9'
    //  androidTestImplementation 'org.apache.commons:commons-lang3:3.9'

    // Room
    def room_version = "2.2.5"
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor
    // RxJava
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.0'
// For Robolectric tests.
    testImplementation 'com.google.dagger:hilt-android-testing:2.33-beta'
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
// ...with Java.
    testAnnotationProcessor 'com.google.dagger:hilt-android-compiler:2.33-beta'
    annotationProcessor 'androidx.databinding:databinding-compiler:4.1.3'
    //butterknife
    // For instrumented tests.
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.33-beta'

    // ...with Java.
    androidTestAnnotationProcessor 'com.google.dagger:hilt-android-compiler:2.33-beta'
    implementation 'com.jakewharton:butterknife:10.2.3'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'
    implementation "android.arch.lifecycle:extensions:2.2.0"
    implementation "android.arch.lifecycle:viewmodel:2.2.0"

    def nav_version = "2.3.2"
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"

    // rxAndroid
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.12'
    implementation 'com.thoughtbot:expandablerecyclerview:1.3'
}


